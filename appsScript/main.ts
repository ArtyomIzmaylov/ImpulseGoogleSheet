

declare var UrlFetchApp: {
    fetch(url:  any, param : any) : any
};

interface BuildPayloadInterface {
    build() : PayloadInterface
}

interface BuildStatusMessageInterface {
    build() : string
}

interface StudentInterface {
    name : string
    phone : string
    manager : string
    status : string
    time? : string
}

interface ManagerInterface {
    name : string
    phone : string
    tgNick : string
}

interface MessageInterface {
    message : string
}

interface ManagerWithStudentInterface {
    manager : ManagerInterface
    student : StudentInterface
}


interface StudentExtractorInterface {
    //init : ManagerInterface;
    extract() : StudentInterface
}

interface ManagerExtractorInterface {
    //init: {StudentInterface, ManageInterface}
    extract() : ManagerWithStudentInterface
}

interface MessageExtractorInterface {
    //init : {ManagerExtractorInterface}
    extract() : MessageInterface
}


interface MessengerInterface {
    //init: {ConfigInterface, MessageExtractorInterface}
    send(url: string, request: RequestInterface): Promise<void>
    sendSync(url : string, request : RequestInterface) : void
}

interface MessengerInterface {
    //init: {ConfigInterface, MessageExtractorInterface}
    send(url: string, request: RequestInterface): Promise<void>
    sendSync(url : string, request : RequestInterface) : void
}

interface ManagerRepositoryInterface {
    //init : GoogleTableObject
    getByNick(tgNick : string) : ManagerInterface
}



interface PayloadInterface {}

interface RequestInterface {
    method : string
    headers : {}
    body? : string
    payload? : string
}

interface WhatsAppPayloadInterface extends PayloadInterface{
    channelId: string;
    chatType: string;
    text: string;
    phone : string
    // –î—Ä—É–≥–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è WhatsApp
}
interface TelegramPayloadInterface extends PayloadInterface{
    message : string
    phone : string
    hmacMessage : string
    hmacPhone : string
}



const secretKet = '92Fhneh0Fhfrtkzy2Irjkf3Bvgekmc11'


declare var Utilities: any;


function calculateHMAC(data: string, key: string): string {
    const hmacKey = Utilities.newBlob(key).getBytes();
    const dataBytes = Utilities.newBlob(data, 'utf-8').getBytes();
    const hashedBytes = Utilities.computeHmacSha256Signature(dataBytes, hmacKey);
    const hexString = hashedBytes.map(byte => ('0' + (byte & 0xFF).toString(16)).slice(-2)).join('');
    return hexString;
}


class TelegramRequestBuilder implements BuildPayloadInterface{
    private messageExtractor: MessageExtractorInterface;
    private studentExtractor: StudentExtractorInterface;
    constructor(messageExtractor : MessageExtractorInterface, studentExtractor : StudentExtractorInterface) {
        this.messageExtractor = messageExtractor
        this.studentExtractor = studentExtractor
    }
    build() : TelegramPayloadInterface{
        return  {
            message: this.messageExtractor.extract().message,
            phone: this.studentExtractor.extract().phone,
            hmacMessage : calculateHMAC(this.messageExtractor.extract().message, secretKet),
            hmacPhone : calculateHMAC(this.studentExtractor.extract().phone, secretKet),

        }
    }

}





class WhatsAppRequestBuilder implements BuildPayloadInterface{
    private messageExtractor: MessageExtractorInterface;
    private studentExtractor: StudentExtractorInterface;
    private readonly channelId: string;
    constructor(messageExtractor : MessageExtractorInterface, studentExtractor : StudentExtractorInterface, channelId : string) {
        this.messageExtractor = messageExtractor
        this.studentExtractor = studentExtractor
        this.channelId = channelId
    }
    build() : WhatsAppPayloadInterface{
        return  {
            channelId: this.channelId,
            chatType: "telegram",
            phone : this.studentExtractor.extract().phone,
            text: this.messageExtractor.extract().message,
        }
    }

}



class StudentExtractor implements StudentExtractorInterface{
    private readonly student: StudentInterface;

    constructor(student : StudentInterface) {
        this.student = student
    }
    extract(): StudentInterface {
        return this.student
    }

}

class ManagerExtractor implements ManagerExtractorInterface {
    private studentExtractor: StudentExtractorInterface;
    private readonly manager: ManagerInterface;

    constructor(studentExtractor : StudentExtractorInterface, manager : ManagerInterface ) {
        this.studentExtractor = studentExtractor
        this.manager = manager

    }
    extract(): ManagerWithStudentInterface {
        return {
            student: this.studentExtractor.extract(),
            manager: this.manager
        }
    }

}



class MessageForEgeExtractor implements MessageExtractorInterface {
    private managerExtractor: ManagerExtractor;

    constructor(managerExtractor: ManagerExtractor) {
        this.managerExtractor = managerExtractor;
    }

    extract(): MessageInterface {
        const studentStatus = this.managerExtractor.extract().student.status;
        let message = '';

        switch (studentStatus) {
            case "1-–π –Ω–µ–¥–æ–∑–≤–æ–Ω":
                message = this.buildFirstNonAnsweredCallMessage();
                break;
            case "–î–æ–∑–≤–æ–Ω.–ù–∞–£—Ä–æ–∫":
                message = this.buildLessonCallMessage();
                break;
            case "–î–æ–∑–≤–æ–Ω.–ë–µ–∑–£—Ä–æ–∫–∞":
                message = this.buildNoLessonCallMessage();
                break;
            default:
                // handle other cases or set a default message
                break;
        }

        return { message };
    }

    private buildFirstNonAnsweredCallMessage(): string {
        const { student, manager } = this.managerExtractor.extract();
        return `–ü—Ä–∏–≤–µ—Ç, ${student.name}! –¢–æ–ª—å–∫–æ —á—Ç–æ —Ç–µ–±–µ –∑–≤–æ–Ω–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–±–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞. –ü–µ—Ä–µ–∑–≤–æ–Ω–∏ –µ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –í–ê –∏–ª–∏ –¢–ì.\n–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${manager.phone}\n–•–æ—Ä–æ—à–æ?)`;
    }

    private buildLessonCallMessage(): string {
        const { student } = this.managerExtractor.extract();
        return `–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç, ${student.name}! –≠—Ç–æ –±–æ—Ç –ò–º–ø—É–ª—å—Å–∞:)\n–õ–æ–≤–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –ø—Ä–æ–±–Ω–∏–∫–∞: https://clck.ru/36JSkc\n\n–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è —Ç–µ–±–µ –ø–æ–∑–≤–æ–Ω—è—Ç –ø–æ –ø–æ–≤–æ–¥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è, –±—É–¥—å –Ω–∞ —Å–≤—è–∑–∏)\n–£–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–∫–µ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä\n–ü–æ–¥—Å–∫–∞–∂–∏, –º–æ–∂–µ—Ç —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã?`;
    }
    private buildNoLessonCallMessage(): string {
        return `–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ò–º–ø—É–ª—å—Å–∞:)\n–õ–æ–≤–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –ø—Ä–æ–±–Ω–∏–∫–∞: https://clck.ru/36JSkc\n\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–¥—É–º–∞–µ—à—å –ø—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—é–±—É—é —Ç–µ–º—É –∏–∑ —ç–∫–∑–∞–º–µ–Ω–∞ (–ø–æ –ª—é–±–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É) ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n https://impulsschool.ru/\n–ú—ã –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ —ç–∫—Å–ø–µ—Ä—Ç–∞!\n–£–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–∫–µ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä\n–ü–æ–¥—Å–∫–∞–∂–∏, –º–æ–∂–µ—Ç —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã?`;
    }
}

class MessageForTildaExtractor implements MessageExtractorInterface {
    private managerExtractor: ManagerExtractor;

    constructor(managerExtractor: ManagerExtractor) {
        this.managerExtractor = managerExtractor;
    }

    extract(): MessageInterface {
        const studentStatus = this.managerExtractor.extract().student.status;
        let message = '';

        switch (studentStatus) {
            case "–û–∂–∏–¥–∞–µ–º –æ—Ç–µ—Ç–∞. 1 –î–µ–Ω—å":
                message = this.buildWaitingForResponseMessage();
                break;
            case "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                message = this.buildLessonDoneMessage();
                break;
            case "–ó–∞–ø–∏—Å—å":
                message = this.buildDefaultMessage();
                break
            default:
                break;
        }

        return {message : message };
    }

    private buildWaitingForResponseMessage(): string {
        const manager = this.managerExtractor.extract().manager;
        return `–ü—Ä–∏–≤–µ—Ç! –¢–æ–ª—å–∫–æ —á—Ç–æ –≤–∞–º –∑–≤–æ–Ω–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø–æ–≤–æ–¥—É –≤–≤–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –í–ê –∏–ª–∏ –¢–ì.\n–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${manager.phone}\n–•–æ—Ä–æ—à–æ?)`;
    }

    private buildLessonDoneMessage(): string {
        return `–ü—Ä–∏–≤–µ—Ç! –û—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–µ. –ë—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–∫ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 10 ‚Äì —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä—É—Ç–æ)`;
    }

    private buildDefaultMessage(): string {
        //const { student, manager } = this.managerExtractor.extract();
        const student = this.managerExtractor.extract().student
        const manager = this.managerExtractor.extract().manager
        return `–ü—Ä–∏–≤–µ—Ç, ${student.name}! –ú—ã –∑–∞–ø–∏—Å–∞–ª–∏ —Ç–µ–±—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç ${student.time}. –•–æ—Ä–æ—à–µ–≥–æ —É—Ä–æ–∫–∞ :)\n–ò–º—è —Ç–≤–æ–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${manager.phone}\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-—É–≥–æ–¥–Ω–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)`;
    }
}



class Messenger implements MessengerInterface{

    async send(url : string, request : RequestInterface): Promise<void> {
        try {
            const response = await fetch(url, request);
            const data = await response.json();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            console.log(data);
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
    sendSync(url : string, request : RequestInterface) : void {
        UrlFetchApp.fetch(url, request);
    }

}

class ManagerRepository implements ManagerRepositoryInterface{
    private managers : ManagerInterface[];
    constructor(managers : ManagerInterface[]) {
        this.managers = managers
    }
    getByNick(tgNick : string): ManagerInterface{
        let manager= this.managers.find(manager => manager.tgNick === tgNick)
        if (manager === undefined || manager === null) {
            return {name: '', tgNick: '', phone:  ''}
        }
        return manager;
    }

}



function sendMessageToTilda(inputDataManager : string[][], inputDataStudent : string[], inputStatus : string) {
//GOOGLE –î–ê–ù–ù–´–ï-–ú–ï–ù–ï–î–ñ–ï–†–´ –ò–ó –¢–ò–õ–¨–î–´ –ò –ï–ì–≠ –õ–ò–°–¢–û–í
    /*    const inputDataManager = [
            ["–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –ì–æ–ª–æ–≤–∞–Ω–æ–≤–∞", '89141516', "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"],
            ["–î–∞—Ä—å—è –î–º–∏—Ç—Ä–∏–µ–≤–∞", 'DJSAJDASJDA', "–î–∞—Ä—å—è –î–º–∏—Ç—Ä–∏–µ–≤–∞"],
            ["–î–∂—É–ª—å–µ—Ç—Ç–∞", '89141516', "Julietta"],
            ["–ê—Ä–∏–Ω–∞ –°–º–æ–ª—è–∫–æ–≤–∞", '89141516', "–ê—Ä–∏–Ω–∞ –°–º–æ–ª—è–∫–æ–≤–∞"],
            ["–¢–∞–º–∞—Ä–∞ –°–æ–ª–æ–≤—å–µ–≤–∞", '89141516', "–¢–∞–º–∞—Ä–∞ –°–æ–ª–æ–≤—å–µ–≤–∞"],
            ["", '89141516', "Arthur Arakelyan üá¶üá≤"],
            ["", "", ""]
        ];
        */
    /*    const inputDataStudent= ["–°–æ–Ω—è –£—á–µ–Ω–∏—Ü–∞", "–ü3 ‚Äì –ü—Ä–æ–±–Ω–∏–∫–∏", "", "926411775", "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–î–æ–∑–≤–æ–Ω.–ù–∞–£—Ä–æ–∫"]

        */
    const managersCollection : ManagerInterface[] = inputDataManager.map((item)=> {
        return {
            name: item[0],
            phone: item[1],
            tgNick: item[2]
        }
    })

    const studentData : StudentInterface = {
        name : inputDataStudent[1],
        phone: inputDataStudent[4],
        manager : inputDataStudent[5],
        time : inputDataStudent[31],
        status : inputStatus
    }

    const telegramRequestPayload = JSON.stringify(
        new TelegramRequestBuilder(
            new MessageForTildaExtractor(
                new ManagerExtractor(
                    new StudentExtractor(studentData),
                    new ManagerRepository(managersCollection).getByNick(
                        new StudentExtractor(studentData).extract().manager
                    )
                )
            ),
            new StudentExtractor(studentData),
        ).build()
    )
    new Messenger().sendSync(
        `http://158.160.24.170:5000/api/sendMessage`,
        {
            method : 'post',
            headers : {
                'Content-Type': 'application/json',
            },
            payload : telegramRequestPayload
        }
    )

}
function sendMessageToEge(inputDataManager : string[][], inputDataStudent: string[]) {
//GOOGLE –î–ê–ù–ù–´–ï-–ú–ï–ù–ï–î–ñ–ï–†–´ –ò–ó –¢–ò–õ–¨–î–´ –ò –ï–ì–≠ –õ–ò–°–¢–û–í

    const managersCollection : ManagerInterface[] = inputDataManager.map((item)=> {
        return {
            name: item[0],
            phone: item[4],
            tgNick: item[3]
        }
    })

    const studentData : StudentInterface = {
        name : inputDataStudent[1],
        phone: inputDataStudent[2],
        manager : inputDataStudent[10],
        status : inputDataStudent[12]
    }
    console.log('Work')

    const telegramRequestPayload = JSON.stringify(
        new TelegramRequestBuilder(
            new MessageForEgeExtractor(
                new ManagerExtractor(
                    new StudentExtractor(studentData),
                    new ManagerRepository(managersCollection).getByNick(
                        new StudentExtractor(studentData).extract().manager
                    )
                )
            ),
            new StudentExtractor(studentData),
        ).build()
    )
    new Messenger().sendSync(
        `http://158.160.24.170:5000/api/sendMessage`,
        {
            method : 'post',
            headers : {
                'Content-Type': 'application/json',
            },
            payload : telegramRequestPayload
        }
    )


}

