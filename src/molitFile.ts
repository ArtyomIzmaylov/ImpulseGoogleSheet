declare var UrlFetchApp: {
    fetch(url:  string, param : any)
};



//INTERFACES


interface StudentInterface {
    name : string
    phone : string
    manager : string
    status : string
}
interface ManagerInterface {
    name : string
    phone : string
    tgNick : string
}
interface ManagerWithStudentInterface {
    manager : ManagerInterface
    student : StudentInterface
}
interface ManagerRepositoryInterface {
    //init : GoogleTableObject
    getByNick(tgNick : string) : ManagerInterface
}
interface StudentExtractorInterface {
    //init : ManagerInterface;
    extract() : StudentInterface
}
interface ManagerExtractorInterface {
    //init: {StudentInterface, ManageInterface}
    extract() : ManagerWithStudentInterface
}
interface MessageInterface {
    message : string
}
interface MessageExtractorInterface {
    //init : {ManagerExtractorInterface}
    extract() : MessageInterface
}
interface MessengerInterface {
    //init: {ConfigInterface, MessageExtractorInterface}
    send() : void
}
interface ConfigInterface {
    get() : void
}



//EXTRACTORS

class StudentExtractor implements StudentExtractorInterface{

    extract(): StudentInterface {
        let studentObj : StudentInterface = {
            name : 'Egorka',
            phone : '926411775',
            manager : '@asmikguak',
            status : '2-–π –Ω–µ–¥–æ–∑–≤–æ–Ω'
        }
        return studentObj
    }

}

class ManagerExtractor implements ManagerExtractorInterface {
    private studentExtractor: StudentExtractor;
    private readonly manager: ManagerInterface;

    constructor(studentExtractor : StudentExtractor, manager : ManagerInterface ) {
        this.studentExtractor = studentExtractor
        this.manager = manager

    }
    extract(): ManagerWithStudentInterface {
        return {
            student: this.studentExtractor.extract(),
            manager: this.manager
        }
    }

}

class MessageExtractor implements MessageExtractorInterface{
    private managerExtractor: ManagerExtractor;
    constructor(managerExtractor : ManagerExtractor) {
        this.managerExtractor = managerExtractor

    }
    extract(): MessageInterface {
        let message = '';
        switch (this.managerExtractor.extract().student.status) {
            case '–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ':
                message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ò–º–ø—É–ª—å—Å¬ª) –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–≤–æ–¥–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º.\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –í–∞–º –Ω–∞–±–µ—Ä–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –±—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏!\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—èüòä`
                break;
            case "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞(—Ç–∏–ª—å–¥–∞, –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è)":
                message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ò–º–ø—É–ª—å—Å¬ª) –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–≤–æ–¥–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º. \n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –í–∞–º –Ω–∞–±–µ—Ä–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –±—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏!\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—èüòä`
                break;
            case "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞(–ø—Ä–æ–±–Ω–∏–∫)":
                message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—É ¬´–ò–º–ø—É–ª—å—Å¬ª. –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É. –í —Ç–µ—á–µ–Ω–∏–µ 1-2 –¥–Ω–µ–π –í–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –Ω–µ–≥–æ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä`
                break;
            case "1-–π –Ω–µ–¥–æ–∑–≤–æ–Ω":
                message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –¢–æ–ª—å–∫–æ —á—Ç–æ –≤–∞–º –∑–≤–æ–Ω–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–±–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞. –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –í–ê –∏–ª–∏ –¢–ì.\n–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${this.managerExtractor.extract().manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${this.managerExtractor.extract().manager.phone}`;
                break;
            case "2-–π –Ω–µ–¥–æ–∑–≤–æ–Ω":
                message =  `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–º —Ç–∞–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ –≤–∞—Å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–±–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω, —Ç–æ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${this.managerExtractor.extract().manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${this.managerExtractor.extract().manager.phone}`;
                break;
            case "–î–æ–∑–≤–æ–Ω.–ù–∞–£—Ä–æ–∫":
                message = `–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ò–º–ø—É–ª—å—Å–∞:)\n–õ–æ–≤–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –ø—Ä–æ–±–Ω–∏–∫–∞: https://clck.ru/36JSkc\n\n–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –≤–∞–º –ø–æ–∑–≤–æ–Ω—è—Ç –ø–æ –ø–æ–≤–æ–¥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è, –±—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏)\n–£–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–∫–µ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä`;
                break;
            case "–î–æ–∑–≤–æ–Ω.–ë–µ–∑–£—Ä–æ–∫–∞":
                message = `–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ò–º–ø—É–ª—å—Å–∞:)\n–õ–æ–≤–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –ø—Ä–æ–±–Ω–∏–∫–∞: https://clck.ru/36JSkc\n\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—é–±—É—é —Ç–µ–º—É –∏–∑ —ç–∫–∑–∞–º–µ–Ω–∞ (–ø–æ –ª—é–±–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É) ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ: https://impulsschool.ru/\n–ú—ã –ø–æ–¥–±–µ—Ä—ë–º –≤–∞–º —ç–∫—Å–ø–µ—Ä—Ç–∞!\n–£–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–±–Ω–∏–∫–µ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä`;
                break;
            case "–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞. 1 –î–µ–Ω—å":
                message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –¢–æ–ª—å–∫–æ —á—Ç–æ –≤–∞–º –∑–≤–æ–Ω–∏–ª –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø–æ–≤–æ–¥—É –≤–≤–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –í–ê –∏–ª–∏ –¢–ì.\n–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${this.managerExtractor.extract().manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${this.managerExtractor.extract().manager.phone}`;
                break;
            case "–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞. 2 –î–µ–Ω—å":
                message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞–º —Å–Ω–æ–≤–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø–æ–≤–æ–¥—É –≤–≤–æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –í–ê –∏–ª–∏ –¢–ì.\n–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${this.managerExtractor.extract().manager.name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${this.managerExtractor.extract().manager.phone}`;
                break;
            case "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                message = `–ü—Ä–∏–≤–µ—Ç! –û—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∑–∞–Ω—è—Ç–∏–µ. –ë—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–∫ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 10 ‚Äì —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä—É—Ç–æ)`;
                break
            default:
                message =`–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${this.managerExtractor.extract().student.status}`;
        }
        return {message : message}
    }

}

//MANAGERS

class ManagerRepository implements ManagerRepositoryInterface{
    private managers : ManagerInterface[];
    constructor() {
        //–≠–¢–û MOCK MANAGERS
        this.managers = [
            {name : 'ManagerAsmik', tgNick: '@asmikguak', phone: '89144597147'},
            {name : 'ManagerAndrey', tgNick: '@andruha', phone: '89143141592'},
            {name: 'ManagerDmitriy', tgNick: '@dimas', phone:  '31415926535'},
        ]
    }
    getByNick(tgNick : string): ManagerInterface{
        let manager= this.managers.find(manager => manager.tgNick === tgNick)
        if (manager === undefined || manager === null) {
            return {name: 'UNDEFINED', tgNick: '@UNDEFINED', phone:  'UNDEFINED'}
        }
        return manager;
    }

}


//CONFIG_TG

class TelegramMessengerConfig {
    private readonly apiUrl: string;
    private messageExtractor: MessageExtractor;
    private studentExtractor: StudentExtractor;
    constructor(token : string, messageExtractor : MessageExtractor, studentExtractor: StudentExtractor) {
        this.apiUrl = `https://api.telegram.org/bot${token}/sendMessage`;
        this.messageExtractor = messageExtractor
        this.studentExtractor = studentExtractor
    }

    getApiUrl() {
        return this.apiUrl
    }
    createMessage() {
        const payload = {
            chat_id: this.studentExtractor.extract().phone,
            text: this.messageExtractor.extract().message,
        };
        return {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            payload: JSON.stringify(payload),
        };
    }
}

//MESSENGER
class TelegramMessenger implements MessengerInterface {
    private telegramMessengerConfig: TelegramMessengerConfig;

    constructor(telegramMessengerConfig: TelegramMessengerConfig) {
        this.telegramMessengerConfig = telegramMessengerConfig
    }

    async send(): Promise<void> {
        const messageConfig = this.telegramMessengerConfig.createMessage();
        try {
            const response = await fetch(this.telegramMessengerConfig.getApiUrl(), messageConfig);
            const data = await response.json();
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            console.log(data);
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    sendSync() : void {
        const messageConfig = this.telegramMessengerConfig.createMessage();
        const response = UrlFetchApp.fetch(this.telegramMessengerConfig.getApiUrl(), messageConfig);

    }
}

//CONFIG




//MAIN
function main() {
    new TelegramMessenger(
        new TelegramMessengerConfig('botToken',
            new MessageExtractor(
                new ManagerExtractor(
                    new StudentExtractor(),
                    new ManagerRepository().getByNick(
                        new StudentExtractor().extract().manager))),
            new StudentExtractor())).sendSync()

}


